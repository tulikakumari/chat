{"version":3,"sources":["BotReplies.js","App.js","index.js"],"names":["createMessageObject","message","userType","responseName","steps","step","name","botSays","validation","email","test","String","toLowerCase","query","userErrorReply","goodbyeMessage","LAST_STEP","Math","max","map","s","App","useState","chats","setChats","setStep","chatActive","setChatActive","useEffect","isLastStep","body","user","find","chat","customerEmail","customerQuery","fetch","method","JSON","stringify","headers","then","res","status","Error","catch","err","console","error","sendEmail","currentStepDetails","className","msg","index","onSubmit","e","preventDefault","input","target","elements","value","nextStep","userMessage","newChats","push","disabled","type","placeholder","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aaf53831.chunk.js","sourcesContent":["export const createMessageObject = (message, userType, responseName = \"\") => {\n  return {\n    message,\n    userType,\n    responseName,\n  };\n};\n\nexport const steps = [\n  {\n    step: 0,\n    name: \"\",\n    botSays: createMessageObject(\"Hi, I am here to help you.\", \"bot\"),\n    validation: null,\n  },\n  {\n    step: 1,\n    name: \"user\",\n    botSays: createMessageObject(\"May I know your name?\", \"bot\"),\n    validation: (name) => !!name,\n  },\n  {\n    step: 2,\n    name: \"customerEmail\",\n    botSays: createMessageObject(\n      \"Where can you reach you, enter the email address?\",\n      \"bot\"\n    ),\n    validation: (email) => {\n      const re =\n        /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n      return re.test(String(email).toLowerCase());\n    },\n  },\n  {\n    step: 3,\n    name: \"customerQuery\",\n    botSays: createMessageObject(\n      \"Thanks for the info, type in the query you want me to forward to my team.\",\n      \"bot\"\n    ),\n    validation: (query) => !!query,\n  },\n];\n","import { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { createMessageObject, steps } from \"./BotReplies\";\n\nconst userErrorReply = createMessageObject(\n  \"That's not quite right, please try again.\",\n  \"bot\"\n);\n\nconst goodbyeMessage = createMessageObject(\n  \"Thanks for filling out the form\",\n  \"bot\"\n);\n\nconst LAST_STEP = Math.max(...steps.map((s) => s.step));\n\nconst App = () => {\n  const [chats, setChats] = useState([steps[0].botSays]);\n  const [step, setStep] = useState(1);\n  const [chatActive, setChatActive] = useState(true);\n\n  const sendEmail = () => {\n    const user = chats.find((chat) => chat.responseName === \"user\").message;\n    const customerEmail = chats.find(\n      (chat) => chat.responseName === \"customerEmail\"\n    ).message;\n    const customerQuery = chats.find(\n      (chat) => chat.responseName === \"customerQuery\"\n    ).message;\n\n    const body = { user, customerEmail, customerQuery };\n\n    fetch(\"http://localhost:3001/\", {\n      method: \"POST\",\n      body: JSON.stringify(body),\n      headers: {\n        \"content-type\": \"application/json\",\n      },\n    })\n      .then((res) => {\n        if (res.status === 200) {\n          setChatActive(false);\n          setChats([...chats, goodbyeMessage]);\n        } else {\n          throw new Error(\"something went wrong\");\n        }\n      })\n      .catch((err) => console.error(err));\n  };\n\n  useEffect(() => {\n    const isLastStep = step === LAST_STEP + 1;\n\n    if (isLastStep) {\n      setChatActive(false);\n      sendEmail();\n    }\n\n    const currentStepDetails = isLastStep\n      ? { botSays: goodbyeMessage }\n      : steps.find((s) => s.step === step);\n\n    setChats([...chats, currentStepDetails.botSays]);\n  }, [step]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    const input = e.target.elements[\"query\"];\n    const query = input.value;\n    if (!query) {\n      return;\n    }\n    const nextStep = step + 1;\n    const currentStepDetails = steps.find((s) => s.step === step);\n\n    const userMessage = createMessageObject(\n      query,\n      \"user\",\n      currentStepDetails.name\n    );\n    const newChats = [...chats, userMessage];\n\n    if (currentStepDetails.validation) {\n      if (currentStepDetails.validation(query)) {\n        setStep(nextStep);\n      } else {\n        newChats.push(userErrorReply);\n      }\n    } else {\n      setStep(nextStep);\n    }\n\n    setChats(newChats);\n    input.value = \"\";\n  };\n\n  return (\n    <div className=\"chat-widget\">\n      <header>\n        <h3>Chat Support</h3>\n      </header>\n      <div className=\"content\">\n        <div className=\"chats\">\n          {chats.map((msg, index) => {\n            return (\n              <div\n                key={index}\n                className={\"chat-bubble \" + msg.userType + \"-bg\"}\n              >\n                <p>{msg.message}</p>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n      <div className=\"message-box\">\n        {chatActive ? (\n          <form onSubmit={handleSubmit} disabled>\n            <input type=\"text\" name=\"query\" placeholder=\"Type your query\" />\n            <button type=\"submit\">Send</button>\n          </form>\n        ) : (\n          <div className=\"chat-disabled\">\n            <span>Chat has ended.</span>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}